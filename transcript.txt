Hi and welcome to Datastudion, a podcast about data and data-drivenness with a focus on people who work with or around data. Together we want to find out terms and concepts, discuss our own experiences and in this way help you as a listener with concrete tips and inspiration. You may be just like us, working with data every day or feel that it is something you should do. And we, who are sitting here today, are me, Hugo, and me, Benny. Fun, Benny, that we are sitting here today, I think. Very cool. It was a long time since we podded together in Datastudion, at least. Exactly, we have done some guest games, as you may have heard, but finally we are back on the home page. Very nice. And today, what are we going to talk about today, Benny?

Today we are going to talk about the modern data platform. And it is often called the modern data stack, as we may sometimes call it. But our ambition is to say the modern data platform. Exactly, and then you may wonder what we mean by that and what it is and why we put an entire episode on this. And that is probably the point with this episode, quite simply. So we are going to discuss a little what it is for something, so we can figure it out. And what is it that makes a tool in the modern data platform modern? And discuss advantages and maybe some disadvantages. And above all, why should you care about this? Exactly, that is perhaps the most important thing. And then I have a completely different thing too. Today we celebrate 1%. That's right. This is episode 20, and that means that we reach the top 1% of all podcasts. Most do not reach 20 episodes, so hurray! Hurray!

And now, before you can start going in here and we, but above all, maybe you go in on what the modern data platform is. I also want to present a little thesis, and this is based on my experience and our experience. It's simply that you who are a developer today, with three to five years of experience, it is easier for you to become a data engineer than someone who has been a database administrator for 25 years. That's my thesis. Maybe then thanks to this modern data platform, or? That's the thought then; we'll see what we get out of it. Yes, but spontaneously I'm not quite against it, but maybe I'm saying it mostly because I have a soft spot so that I can confirm your thesis and that I can relate to it myself, but we'll have to look at it a little bit.

But then comes the natural question: What is this modern data platform for something? Is it so very modern, Hugo? Yes, I've tried to dig a little bit into this term, 'modern data platform', until it was coined and you can go back to the early 2010s about, you could say that 2016, that year, then it really started to establish itself within venture capitalists, investors and such, that you have got your eyes open for investing in such a company that deals with data. Modern data platform, so then it was a hype, then many investors would get involved in this market, to invest in actors who work with the modern data platform, so I would say that in the last 10-15 years it has been a thing.

And then I think, Osveig, and maybe you don't have the answer, but then I wonder, does this correlate very much with the progress of, at that time, Big Table, which became Big Query? Yes, partly, but I think that, for example, AWS, that is, Amazon's Redshift, that is, their data warehouse solution, was probably the first, so they were before Big Query, so they were probably even earlier, but absolutely. Yes, but what I was thinking was that I know, if you have listened to another very good podcast, which I will not mention, but which is about product stories from Spotify, then they talked to me about when Spotify would go from on-premises to cloud. And then they didn't choose AWS. That's right.

But they chose to go with Google, because Google was going to build up Big Table, and then Spotify had the opportunity, and then I think that this is exactly the same thing back in the day. Can this somehow, I don't know, oh shit, now it's data that is here for cool companies. Yes, certainly. Then just the example you mentioned, Spotify absolutely works with modern data platforms. But I would also like to claim that they are. Yes. Not the main example of companies that work with what we, in this podcast, will define as the modern data platform. They are, like, next level; they have, like, they have, like, a morphed modern data platform; they have, like, made their own extreme version of it, but they are not, for me, a type of example of the modern data platform.

It will be an episode where we go through theirs, maybe. Exactly. But now I still haven't said what it is, what is this for something? A modern data platform. What is a data platform? Well, you could say that it is a collection of tools within the cloud to be able to collect, process, store and analyze data. So the key is that there are different tools that do different things, and that it is cloud. So the key is that there are different tools that do different things, and that it is cloud. So the key is that there are different tools that do different things, and that it is cloud. So the key is that there are different tools that do different things, and that it is cloud.

What we will say is that there are absolutely modern tools that you can use on-prem, but in this definition when you talk about a modern data platform, you are often talking about just cloud solutions. What we will say is that there are absolutely modern tools that you can use on-prem, but in this definition when you talk about a modern data platform, you are often talking about just cloud solutions. And then, one means that you come away from this monolith that we have selected. Indeed, it is really a micro-service setup that you can use a lot of different tools, then you can discuss whether it's good or bad; it's always in vain to have a lot of different services or one monolith, and we will surely see a backlash on that.

Or one monolith, we will certainly see a backlash on that, and it may be a spoiler on what we will talk about later, actually. It may be. But here I would like to present my first summary. The thesis that it is easier to make a transition from software as a developer today to data engineering. A developer today is used to working with different tools to solve different problems. While a database administrator is very often an expert on a specific platform. You are an Oracle expert or you are a Microsoft SQL expert. But it is a key here to be able to use different tools in different situations. Yes, you could say that. I will not disagree with that. Another important aspect of these tools is that they are designed to be able to handle ...

large amounts of data. And often real-time or streamed data. And would be able to facilitate a data-driven workflow. So that is the definition of a modern data platform. Exactly. And again, a reflection. This reminds me of how you build modern products. You can test on a small scale. Yes. And it scales by itself, so to speak. You just need to allocate more resources. You do not need to rebuild it to handle more users. You do not need to order new servers. All of this. Exactly. And now we dive directly into what the advantages are. And that is really one of the big advantages, as you say, Benny. What is very clear with these tools is that they should scale well. So you can scale. In theory, at least.

Without problems, you can increase the load or the amount of data you process a hundredfold. A thousandfold. What changes here, as you mentioned, is the cost. But you do not need to drastically rebuild your entire architecture to be able to handle this new increase in data. These tools should be able to handle it without problems. And then it also sounds like to work in this platform. So you have a lot more power that develops as well. Yes. How do you think then? I think that traditionally you may be sitting as a database administrator or a database administrator. And you may not have the right to increase resources to yours. But here it sounds very much like you in this case, or whoever you are, the engineer, defines this scalability.

Or now I increase my load. It feels like you need a little more capacity when you are working in it. Yes, exactly. Let's say that you may need to order a new server. That is, a physical server so that you can scale the database. Then maybe you have the capacity to do that. But it is still quite a lot more work to order this new server, install it, connect it to the old one and so on. In such a cloud world, then maybe you just increase the maximum limit from one level to another with a push of a button or some configuration. It is much easier and simpler and faster; rather, I would like to claim, than a necessity problem, I would like to claim.

I was thinking just about, at least when I have been the owner of such cloud platforms, I have often just had a budget. And then within that budget, we can do as much as we want. That's right. While before. When I worked with Linux. When I worked with on-premise servers. Then I very often needed someone who wrote under a piece of paper. Because now we are doing a big purchase. That is, it is a very big thing. That today we will go from three to seven servers. Each server costs fifty to a hundred thousand pieces. I want half a million, thank you. But now it is more. Can we increase our cloud cost? Of course. Yes, you are right. It will be such a high input cost. That's the difference.

Then there is the risk that it may be a very high cost in the long run. Because you pay for what you use, and you do not have control over how much you use. Then you can suddenly shoot the height with the cost. Then I can give a tip that it is very, very good to actually have a roof. Because if someone makes a mistake in the cloud, then it can cost as much as possible. Yes, I have heard such horror stories about where someone has done in BigQuery, which is Google's data warehouse tool. That someone did an SQL query against BigQuery, then. Which may have gone through some different tables. Made some joins. And then you press enter. And then it processes a lot of data in a complex way.

Then you got a note for one query. On tens of thousands of dollars. As I said, a roof is very good. Freedom is also good. It is a must if you are going to. It is very important. But it is at least one advantage that you brought up there, Benny. That it is scalable. With its risks, as we just mentioned there too. But another advantage is that it is easy to test other tools. And deploy other tools and so on. So let's say you have some tools that do. Someone picks up data. Someone processes data. So maybe you want to test another tool that handles quality, does a quality analysis. So maybe it is very easy to just hook it up. Because it is so smooth. So it is a key thing.

That it is simple and smooth. So we have reached the architect's boat dream. Everything is a puzzle. And it is just to take a new piece of the puzzle. And then it fits. Yes, great that it just fits. You don't even have to try to push in a piece of the puzzle that doesn't really fit. It works anyway. It's nice. Very good. And then connected to that, you can almost understand. Is that it is. Let's say now, that you have tested a data quality tool. And then you keep doing it for a few months. Or a year. And then comes a new data quality tool. Then maybe. Then it should be in theory. It was quite easy to replace. It's like exchangeable. It's like you can see it as small components.

Or a little microservices. You can easily replace this microservice. Towards another. So that I would say. Are the three. Things that make it. Be modern. What makes a tool. Modern. In. Modern. Data platform. It is that it is. Simple. It is that it is scalable. And it is that it is exchangeable. And those of you who have listened to this pod. And even you Hugo. Those of you who listen to me. You know that I love similarities. And now, I'm thinking about my TV at home. And then I think about all the streaming services I have. It's very similar. Now there is an upgraded version of this series, which is a little better. All of a sudden, yes, yes, yes, yes, yes, yes, yes, it is a little better. Yes.

Well, then I change. Maybe in the best case, I am in the worst case, like most. And just, I have twenty premonitions. All of a sudden. But in theory, so can I just cancel one subscription and start with a new? While a few years ago, there was a phone subscription. Now it's twenty-four months, Channel Plus, and we decide what is good from now. So, so it should. So, it should work. You can just. Now that we have. We are used to that in today's society, that you just have to be able to try new things and change things, and that has almost been taken as a kind of right now in our everyday life, isn't it? You really get provoked if they talk about binding time, or if it even costs anything the first month.

Do these tools cost directly, or do you get a little grace time first to try? I'm still waiting for the concept that you will own a car. I'm not even a car enthusiast. I believe that it should be more reasonable to lease. It shouldn't be more expensive to lease necessarily, or it should be more beneficial at least. I believe more in renting, monthly subscription or whatever. Leasing today is also binding times, but I think it should be easier to rent a service, a car for example. I agree with you to a certain extent, but I'm not going to talk about what I don't agree with, because then we have a new episode on the way. Okay, is it like this then?

Because I think that just like with my training services at home, is it de facto that you change tools and that you lower the cost of being efficient and all that? Or is it that you have three tools that you didn't need because it was so easy to start them? That's a great question. I would say that of those things that you mentioned there, I would still toast to me that the two things I relate to most are that it is easy, it is incredibly easy to get started. Now I understand that it's not Hugo who pays the monotonous; It is generally very easy. People have understood that it is a little cutting edge for them, but to use, maybe. It has to be usable, have people noticed, because what does it take to use my tool that I have developed?

It has to be easy to get started. It's really very clear. It can be that it's almost fairly easy in the beginning, and then when you're going to do a little more complex things, then maybe it's not that easy in the long run. It's really easy in the beginning. And number two, scalability. Because most of them also fit very well together, so those two. But the last one, related to your question, how exchangeable is it? In the end, it's as exchangeable as you make it. So you can take a component that in theory is very exchangeable, but then you can, when you sew it together, your components, do it in a way that you can lock it. Yes and no. And as long as you have it, there is a greater risk that you lock yourself in.

More and more. It's the same thing with cloud. In theory, you can go from one cloud to another. But in practice, you have probably used a very specific service in one cloud that doesn't have a 100% match in another cloud. Or you have started to adapt your code in this cloud that is specific to the service that the cloud offers. So when you need another cloud with a corresponding service, you have to adapt to it. So in practice, it's not as easy. It's a bit like me paying for Apple TV Plus. But I don't even use anything there. But it's via Apple TV Plus that I've bought Sky. So now I have to depend on Apple TV Plus to get to watch my Sky shows.

I like that your references are always what you watch on TV. It sounds like a very fun day. Yes, TV is good. I have another picture of you not spending so much time on TV, but now I wonder if that's the case. You might just hang out in front of the TV. Yes, I hang out a lot with making it possible to watch TV. I'll be completely honest when I say that there's not as much TV to actually watch. But I would say that the other great advantages of this tool in the modern data platform is that it is clear that these tools are often born from a need. So when people have created them, there has been a need. And it is also very clear that it is often software developers who have been involved.

They have developed these products in one way or another. And solved those problems that, what should I say, old traditional alternatives in the data world have not been able to handle. A simple thing like version management. That's good. Version management is a no-brainer for serious software developers who are involved in software development and digital products. But in data analysis and the data world, it has not historically been a certainty. Yes. When you update a scheme in a database, you do it directly to the production database. Maybe historically. Scary. You don't have a test database. And you don't have, above all, version management so you can go back or whatever. So you see that in many tools you have that mindset that it should be easy to test something and then roll back with the help of version management.

Very important. It is also a thing like that you can reuse things. It is also connected to this with software thinking. Modularity. A component. Instead of copy-pasting, or whatever you want to say, you can reuse the same code, the same logic in several places without copy-pasting. If you make one mistake in this code, this logic in one place, it's enough to update it in that place. All other places. Instead of having to change in several places where you have the same bug or error or whatever, that sounds fantastic. Well, I know it is fantastic. I feel that when we talk about not having a test environment, you have no version management, then we are back. Back to these often heroes who have been working with their database for 20 years and they solve everything.

There is no problem. The database crashes on Friday night, but Stefan, you can always call Stefan. He rushes in. He fixes this. The organization is celebrating. But no one asks, how did this even happen? Can we avoid it? And I think it is also related to the cost. A test environment is expensive if it is physical. Yes, true. Should we double our server stack so that you can sit and play? I don't think so. Or even more. I think it's important to talk about this in your test environment. What kind of data should you have there? Should it be test data? Or should you have production data in your test environment? Very good point. And then connected to this with this very good database administrator, Stefan. Stefan is his name.

My dad's name is Stefan. Is this finally an opinion that he wants to listen to? Or was it a podcast now when I was still talking about my dad? Exactly. The talented database administrator. No, not you, dad. Now you have to reconnect. Have you listened to this episode or not? No, but connect to Stefan then. And not my dad, but the database administrator. Another good thing about these tools is automation. There is so much with automation. You should not require a lot of manual manual work. Everywhere. Everything about automatic deployment. Automatic testing. Automatic flows. Things like that. That makes it go faster. But also minimizes the risk of human errors. Because we humans will sometimes write wrong. We will press the wrong button, or be a little sad and press the wrong button.

Let automation handle it. Automation does not get tired. Automation does not make mistakes. On the other hand, when you implement automation, you can make mistakes, but that is another discussion. Yes, of course. No, very, very true. And again, connected to the modern thinking. That Stefan does not think it is a problem that he needs to go in and fix this. It is his job. It is what he deserves. So when I talk to Stefan about this, I do not want you to do this on those days. Then you question someone's worth. Then you question someone's worth. Then you question someone's worth. I do not want to say goodbye. A complete standard developer. Who has worked for three years. Who has worked for three years. Who has worked for three years.

That is of course. That is what you do. That is what you do. But why should you care? But why should you care? Why should I care? I do not care. You have a functioning server with your database. You have a BI-consult that builds a dashboard on your pre-installed database. You have a BI-consult that builds a dashboard on your pre-installed database. Why should you care about this? It seems very expensive to do all of this. Yes, it may be expensive to do this. But I would say that the big advantages are that these tools in the modern data platform these tools in the modern data platform are adapted to the new reality. are adapted to the new reality. That is to say cloud computing. That is to say cloud computing.

That is to say cloud computing. That is to say cloud computing. There are specific tools that solve specific problems There are specific tools that solve specific problems that you may not even know you had. I have not even mentioned any examples. Data transformation for example. Data transformation for example. A key component, a key tool in many companies' in many companies' modern data platforms that have been implemented. This is the DBT tool. It is a classic example. There are companies that work with a modern data platform that do not have the DBT tool. What is the DBT? It is a tool for, in a scalable way, to be able to define data transformations, to be able to build models, to be able to build models and document these models, and test these models, and understand which models depend on each other to be able to create a reliable data source.

to be able to create a reliable data source. This is an example of if you start to pick up some of these good solutions that exist, good tools that exist, then you will suddenly jump on good tools that solve good tools that solve a lot of company problems and you do not want to miss it. You have a lot of potential to create value in these tools. So you mean that my BI developer does not have to sit all day and react to the fact that all the dashboards crash all the time because he has built the transformation or she for each visualization. It happens somewhere else, and then you can instead be out talking to decision makers and users and how this is used. It sounds great.

The throughput will increase, innovation will increase, security will increase, reliability it will be easier to share data. There are great tools for data democratization, for example, data catalogs. What else is there? There are great tools to be able to orchestrate advanced data transformations, that's to say, before we had one pipeline that did all the transformations and they became tougher and tougher and more complex and the team that sat on these even stopped. Yes, because it became too hard or they have left. I mean it took too long and it is knowledge that was built 20 years ago. There are great tools now that make this so much easier and easier for someone else to get into. So there are many advantages with these. So that's why it should be.

If we go back to the modern, a man a hammer and he will walk around looking for spikes; it often feels like old-fashioned monolith solutions. We've built our entire platform after a certain technique, and now we're going to adapt both your data and your processes after our tool instead of having a toolbox and then choosing the tools that fit. In our business, this is important. Perfect. Then we use this tool. I'm sold. Are you excited to be more data-driven or have a more data-informed culture? Then you should start searching for this. Search for Modern Data Stack and you will surely be overwhelmed because there is a lot of tools, but check this out because this is exciting. This is a great start, link.

Now we have to talk about your thesis earlier. You said that you think it is easier for a software developer to succeed with this than a classic database developer. I really hold on to that if you are going to work with a modern data platform. And you can nuance it and make mistakes when you take your existing data team that has been doing this for 20 years, and then they should learn the tools that they should learn is software development. They should learn how to create functions and reusable code, version management, all those bits. Of course, domain knowledge and experience is worth a lot. It's not so clear that I think this is bad people. Instead, you can take a standard developer and say, 'This is data. We want it this way.' Go.

Yes, really, really. But then I have a little sparring too. Yes. Because I think, and that is also now back to the TV. It's also happening in the TV that we can not. In the end, it is really fun with all these different tools. There are new versions and everything is so flexible and all the poor look different. And then you have to keep up and keep up. And now there is a new version of this. And now it's not this transformation tool. Now it's not DBT. Now it's QSK that is best. Now we are going to change. And we get so tired of it. And then there are these safe hatches that toughen on Microsoft, Amazon, and slowly, slowly they buy. And then we have to get to our platform.

Exactly. And I do not think it is just a future sparring. It is also a modern sparring. Because what was it I said there? About 2016, I would say, was probably the beginning of peak hype. But I would say that the whole modern data platform hype peaked properly in 2022. I think you can see it quite early. And when you think about the tools and companies that create these tools, which can be both open source or that also offer some kind of payment service, then they were absolutely highly valued. They were insanely highly valued. Then you should not forget that almost all these companies are backed by different investment companies. And then we've had a little economic situation in recent years. And what happens then? Also, in the midst of a new AI hype hype.

And then you can think that this modern data platform is in line with that. Maybe not completely. It may have originally been designed for analysis before AI. AI has a slightly different needs than what analysis has. So what has happened in the last two years is that a lot of these companies that have been backed by investors have either crashed or been bought up by each other, or by the big giants that you were in Microsoft or Amazon or Google. So if two years ago, when it was at its peak and hyped, we had ten actors for collecting data, then maybe today we have two or three that are serious. And then as much as I agree with you completely, it is messy, and a bit difficult to have 15 different tools in your computer, your data platform.

Then you should manage 10-15 tools. There's some kind of convenience to be able to rely on a few single ones. So I agree with you completely. And we already see that it's starting to become a kind of consolidation of the tools. Some stick out more, some expand what they actually offer for the type of solutions. So instead of having both that tool and this tool, it was enough with the first one because it covers a bit of what the other tool did before as well. And then I agree that Microsoft will buy more and more. We see two major actors are Snowflake, which is a data warehouse tool, and Databricks, which is more of a data lake tool that has gone more and more towards data warehouse. Also interesting.

Databricks is owned by a certain part of Microsoft, as an example. Not quite, but a large part. So Microsoft is involved and is well integrated into the Microsoft stack. And Snowflake is losing market share. They are losing market share quickly right now. And that's what you think, especially since they don't have a really good AI offering. And if you're an engineer, you might think that. And then you can also think that they may never - they are not that new. They have not worked with enterprise sales for years. Just like when Microsoft starts its sales organization. And there you are actually on something. Because it's probably now, the enterprise companies are probably never the first to implement the new hype.

They always come on, there's always some enterprise company that starts and then all the other enterprise companies panic and also jump on the train. So, it is mainly the last few years that the enterprise companies have also started to implement what these modern data platforms are. And in line with that, it is then Microsoft and so on, that they start to get involved and buy in. But it also puts more demands on these companies that have these modern tools, that they should be able to handle an enterprise customer. Because there will be other requirements and regulations and such. Now it's over with the playground. Yes, but a little like that. You've been a startup for a long time now, it has been nice. You have a nice open-source solution.

But now you have us as a customer. We are a giant company globally. Yes, you deliver on this and this and this and this. And it's like, I don't move. We don't change this process. You change your code. Now. Exactly. And many have done that. And those who have done that, they are the ones who are left. And have been able to do it too. It is required that they should be able to do it and they should be able to have money for it and so on. So there are some tools that are absolutely still highly up-to-date. So, that you can be more modern in your data platform. And then we can start to round off. And then I want to round off with a new thesis.

The modern data platform is not so modern. No, it's a little clumsy to call something modern. What is the definition of modern, Benny? Yes, a good question. Something that is in time. And this sounds more like something that has been in time. And we may be on our way into a new era. Yes, what is modern now. We are hyped now. There is probably a long correlation between modernity and hype. But that's probably AI. Now that's the modern. Exactly. And it's also like a concluding thing to say that what I have now or we have now defined as a modern data platform. I would almost more like to define it as a modern analysis platform in many ways.

So, what you still call a modern data stack today, a modern data platform, I would rather like to see as a modern analysis data platform. And maybe even a standard. Yes. Just like when market services emerged as a pattern in software development, it was hot and many talked about it. Now we don't talk about it. We expect it. Exactly. Yes, what have we talked about today, Benny, to try to summarize a little? My TV. Your dad. Dad. Don't forget about your dad. Yes. Your dad. Your dad. Your dad. Your dad. Don't forget about your dad. Don't forget about your dad. Now you have to reconnect with me. Have you listened to this episode or not? No. Joke aside. We have talked about the modern data platform, the modern data stack.

We have talked about what it is for something, why it exists, what advantages it has. We have also tried to highlight some risks. And then we have really tried to get you who are listening to answer the question, 'Why should you care?' Exactly. Yes. Yes. And then we conclude with our future plan. The modern data platform. Not so modern. With this, I feel satisfied. Shall we move on with our life? Yes. End 20. Checked. Great. One percent. Top one percent. Cool. Thank you for listening. We put links as usual and e-mail if you have questions. To? Datastudion. App. Slated out. . . . . . . . . . . . . . . . . . . .